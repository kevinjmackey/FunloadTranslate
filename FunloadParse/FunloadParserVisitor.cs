//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\projects\YRC\Translate Funloads\FunloadAntlr\FunloadParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FunloadTranslate {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="FunloadParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface IFunloadParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.funload_file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunload_file([NotNull] FunloadParser.Funload_fileContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.job_blocks"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJob_blocks([NotNull] FunloadParser.Job_blocksContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.job_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJob_block([NotNull] FunloadParser.Job_blockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] FunloadParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.job_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJob_statement([NotNull] FunloadParser.Job_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.jcl_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJcl_statement([NotNull] FunloadParser.Jcl_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.open_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOpen_statement([NotNull] FunloadParser.Open_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.open_file_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOpen_file_list([NotNull] FunloadParser.Open_file_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.report_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReport_statement([NotNull] FunloadParser.Report_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.funload_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunload_statement([NotNull] FunloadParser.Funload_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.foreach_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForeach_statement([NotNull] FunloadParser.Foreach_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf_statement([NotNull] FunloadParser.If_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.else_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElse_clause([NotNull] FunloadParser.Else_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.elseif_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseif_clause([NotNull] FunloadParser.Elseif_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.endif_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEndif_clause([NotNull] FunloadParser.Endif_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFor_statement([NotNull] FunloadParser.For_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.leave_for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLeave_for_statement([NotNull] FunloadParser.Leave_for_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.leave_repeat_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLeave_repeat_statement([NotNull] FunloadParser.Leave_repeat_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.put_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPut_statement([NotNull] FunloadParser.Put_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.put_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPut_clauses([NotNull] FunloadParser.Put_clausesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.put_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPut_clause([NotNull] FunloadParser.Put_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.position_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPosition_clause([NotNull] FunloadParser.Position_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.format_spec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormat_spec([NotNull] FunloadParser.Format_specContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.missing_default_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMissing_default_clause([NotNull] FunloadParser.Missing_default_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.error_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitError_clause([NotNull] FunloadParser.Error_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.sort_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSort_statement([NotNull] FunloadParser.Sort_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.column_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumn_name([NotNull] FunloadParser.Column_nameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.occurs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOccurs([NotNull] FunloadParser.OccursContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.output_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOutput_statement([NotNull] FunloadParser.Output_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.ready_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReady_statement([NotNull] FunloadParser.Ready_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.repeat_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRepeat_statement([NotNull] FunloadParser.Repeat_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.end_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnd_statement([NotNull] FunloadParser.End_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.select_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSelect_statement([NotNull] FunloadParser.Select_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.select_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSelect_clause([NotNull] FunloadParser.Select_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.when_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhen_clause([NotNull] FunloadParser.When_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.otherwise_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOtherwise_clause([NotNull] FunloadParser.Otherwise_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.end_select_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnd_select_clause([NotNull] FunloadParser.End_select_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.skip_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSkip_statement([NotNull] FunloadParser.Skip_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.logout_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogout_statement([NotNull] FunloadParser.Logout_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.print_all_information_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrint_all_information_statement([NotNull] FunloadParser.Print_all_information_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.unload_all_information_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnload_all_information_statement([NotNull] FunloadParser.Unload_all_information_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.special_funload_statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpecial_funload_statements([NotNull] FunloadParser.Special_funload_statementsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.out_to_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOut_to_statement([NotNull] FunloadParser.Out_to_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.to_output_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTo_output_clause([NotNull] FunloadParser.To_output_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument([NotNull] FunloadParser.ArgumentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgs([NotNull] FunloadParser.ArgsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument_list([NotNull] FunloadParser.Argument_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParams([NotNull] FunloadParser.ParamsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam([NotNull] FunloadParser.ParamContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.dsn_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDsn_expression([NotNull] FunloadParser.Dsn_expressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.jcl_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJcl_expression([NotNull] FunloadParser.Jcl_expressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.assignment_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment_statement([NotNull] FunloadParser.Assignment_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] FunloadParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.filename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilename([NotNull] FunloadParser.FilenameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.recin"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecin([NotNull] FunloadParser.RecinContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] FunloadParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] FunloadParser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.complex_conditional_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComplex_conditional_expression([NotNull] FunloadParser.Complex_conditional_expressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.conditional_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditional_expression([NotNull] FunloadParser.Conditional_expressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.conditional_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditional_operator([NotNull] FunloadParser.Conditional_operatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.continuation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinuation([NotNull] FunloadParser.ContinuationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.conjunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConjunction([NotNull] FunloadParser.ConjunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.integer_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInteger_value([NotNull] FunloadParser.Integer_valueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] FunloadParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] FunloadParser.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FunloadParser.signed_int"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSigned_int([NotNull] FunloadParser.Signed_intContext context);
}
} // namespace FunloadTranslate
